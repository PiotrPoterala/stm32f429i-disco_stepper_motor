#include "config.h"
#include "input_signals.h"
#include "def_pins.h"

//konfigurowanie sygnalow taktujacych
void RCC_Config(void){

		SystemInit();

//odblokowanie taktowania dla niezbędnych peryferiów
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;	
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;	
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;	
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;	
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;	
		
		RCC->APB1ENR|=RCC_APB1ENR_USART2EN;
}

void NVIC_Config(void)
{   
		NVIC_SetPriorityGrouping(NVIC_PriGroup_4); //16 priorytetów preemption, brak subpriorytetów 


		NVIC_SetPriority(USART2_IRQn, 7);  	
		NVIC_EnableIRQ(USART2_IRQn);

}

void GPIO_Config(void)
{
//konfiguracja portu A
	ALT_SET_REG(GPIOA, Pin2, IO_OUT_HS);
	GPIOA->AFR[0]=(GPIOA->AFR[0] & ~(0xF<<(Pin2*4))) | (GPIO_AFR_AF7<<(Pin2*4)); //USART2 TX
	ALT_SET_REG(GPIOA, Pin3, IO_OUT_HS);
	GPIOA->AFR[0]=(GPIOA->AFR[0] & ~(0xF<<(Pin3*4))) | (GPIO_AFR_AF7<<(Pin3*4));	//USART2 RX
	
	
	
	
	IN_SET_REG(GPIOA, Pin3, IO_IN_PU);						//INT Pin (FT8xx)
	OUT_SET_REG(GPIOA, Pin4, IO_PP, IO_OUT_HS);	//Power Down Pin (FT8xx)
	OUT_SET_REG(GPIOA, Pin5, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOA, Pin6, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOA, Pin7, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOA, Pin8, IO_PP, IO_OUT_HS);
	
	ALT_SET_REG(GPIOA, Pin9, IO_OUT_HS);
	GPIOA->AFR[1]=(GPIOA->AFR[1] & ~(0xF<<((Pin9-8)*4))) | (GPIO_AFR_AF7<<((Pin9-8)*4)); //USART1_TX
	ALT_SET_REG(GPIOA, Pin10, IO_OUT_HS);
	GPIOA->AFR[1]=(GPIOA->AFR[1] & ~(0xF<<((Pin10-8)*4))) | (GPIO_AFR_AF7<<((Pin10-8)*4)); //USART1_RX
	
	ALT_SET_REG(GPIOA, Pin11, IO_OUT_HS);
	GPIOA->AFR[1]=(GPIOA->AFR[1] & ~(0xF<<(Pin11-8)*4)) | (GPIO_AFR_AF10<<((Pin11-8)*4)); //OTG_FS_DM
	ALT_SET_REG(GPIOA, Pin12, IO_OUT_HS);
	GPIOA->AFR[1]=(GPIOA->AFR[1] & ~(0xF<<((Pin12-8)*4))) | (GPIO_AFR_AF10<<((Pin12-8)*4));	//OTG_FS_DP
	
	OUT_SET_REG(GPIOA, Pin13, IO_PP, IO_OUT_HS);	//LED1
	OUT_SET_REG(GPIOA, Pin14, IO_PP, IO_OUT_HS);	//LED2
	OUT_SET_REG(GPIOA, Pin15, IO_PP, IO_OUT_HS);	//OTG_EN
	
//konfiguracja portu B
	OUT_SET_REG(GPIOB, Pin0, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOB, Pin1, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOB, Pin2, IO_PP, IO_OUT_HS);

	IN_SET_REG(GPIOB, Pin3, IO_OUT_HS);
	IN_SET_REG(GPIOB, Pin4, IO_OUT_HS);
	IN_SET_REG(GPIOB, Pin5, IO_OUT_HS);
	IN_SET_REG(GPIOB, Pin6, IO_OUT_HS);
	IN_SET_REG(GPIOB, Pin7, IO_OUT_HS);
	IN_SET_REG(GPIOB, Pin8, IO_OUT_HS);
	IN_SET_REG(GPIOB, Pin9, IO_OUT_HS);

	OUT_SET_REG(GPIOB, Pin10, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOB, Pin11, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOB, Pin12, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOB, Pin13, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOB, Pin14, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOB, Pin15, IO_PP, IO_OUT_HS);

//konfiguracja portu C
	IN_SET_REG(GPIOC, Pin0, IO_OUT_HS);
	IN_SET_REG(GPIOC, Pin1, IO_OUT_HS);
	IN_SET_REG(GPIOC, Pin2, IO_OUT_HS);
	IN_SET_REG(GPIOC, Pin3, IO_OUT_HS);
	
	ALT_SET_REG(GPIOC, Pin4, IO_OUT_HS);
	GPIOC->AFR[0]=(GPIOC->AFR[0] & ~(0xF<<(Pin4*4))) | (GPIO_AFR_AF7<<(Pin4*4)); //USART3_TX
	ALT_SET_REG(GPIOC, Pin5, IO_OUT_HS);
	GPIOC->AFR[0]=(GPIOC->AFR[0] & ~(0xF<<(Pin5*4))) | (GPIO_AFR_AF7<<(Pin5*4)); //USART3_RX

	IN_SET_REG(GPIOC, Pin6, IO_OUT_HS);
	IN_SET_REG(GPIOC, Pin7, IO_OUT_HS);
	IN_SET_REG(GPIOC, Pin8, IO_OUT_HS);
	IN_SET_REG(GPIOC, Pin9, IO_OUT_HS);
	IN_SET_REG(GPIOC, Pin10, IO_OUT_HS);
	IN_SET_REG(GPIOC, Pin11, IO_OUT_HS);
	IN_SET_REG(GPIOC, Pin12, IO_OUT_HS);	//OTG_FAULT
	IN_SET_REG(GPIOC, Pin13, IO_OUT_HS);

//konfiguracja portu D
	OUT_SET_REG(GPIOD, Pin0, IO_PP, IO_OUT_HS);	
	OUT_SET_REG(GPIOD, Pin1, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin2, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin3, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin4, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin5, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin6, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin7, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin8, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin9, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin10, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin11, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin12, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin13, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin14, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOD, Pin15, IO_PP, IO_OUT_HS);

//konfiguracja portu E
	OUT_SET_REG(GPIOE, Pin0, IO_PP, IO_OUT_HS);	
	OUT_SET_REG(GPIOE, Pin1, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOE, Pin2, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOE, Pin3, IO_PP, IO_OUT_HS);
	
	IN_SET_REG(GPIOE, Pin4, IO_OUT_HS);
	IN_SET_REG(GPIOE, Pin5, IO_OUT_HS);
	IN_SET_REG(GPIOE, Pin6, IO_OUT_HS);
	IN_SET_REG(GPIOE, Pin7, IO_OUT_HS);
	
	OUT_SET_REG(GPIOE, Pin8, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOE, Pin9, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOE, Pin10, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOE, Pin11, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOE, Pin12, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOE, Pin13, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOE, Pin14, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOE, Pin15, IO_PP, IO_OUT_HS);

//konfiguracja portu F
	OUT_SET_REG(GPIOF, Pin0, IO_PP, IO_OUT_HS);	
	OUT_SET_REG(GPIOF, Pin1, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOF, Pin2, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOF, Pin3, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOF, Pin4, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOF, Pin5, IO_PP, IO_OUT_HS);

	ALT_SET_REG(GPIOF, Pin6, IO_OUT_HS);
	GPIOF->AFR[0]=(GPIOF->AFR[0] & ~(0xF<<Pin6*4)) | (GPIO_AFR_AF10<<(Pin6*4)); //QUADSPI_IO3
	ALT_SET_REG(GPIOF, Pin7, IO_OUT_HS);
	GPIOF->AFR[0]=(GPIOF->AFR[0] & ~(0xF<<Pin7*4)) | (GPIO_AFR_AF10<<(Pin7*4)); //QUADSPI_IO2
	ALT_SET_REG(GPIOF, Pin8, IO_OUT_HS);
	GPIOF->AFR[1]=(GPIOF->AFR[1] & ~(0xF<<(Pin8-8)*4)) | (GPIO_AFR_AF10<<((Pin8-8)*4)); //QUADSPI_IO1
	ALT_SET_REG(GPIOF, Pin9, IO_OUT_HS);
	GPIOF->AFR[1]=(GPIOF->AFR[1] & ~(0xF<<(Pin9-8)*4)) | (GPIO_AFR_AF10<<((Pin9-8)*4)); //QUADSPI_IO0
	ALT_SET_REG(GPIOF, Pin10, IO_OUT_HS);
	GPIOF->AFR[1]=(GPIOF->AFR[1] & ~(0xF<<(Pin10-8)*4)) | (GPIO_AFR_AF3<<((Pin10-8)*4)); //QUADSPI_CLK

	OUT_SET_REG(GPIOF, Pin11, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOF, Pin12, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOF, Pin13, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOF, Pin14, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOF, Pin15, IO_PP, IO_OUT_HS);

//konfiguracja portu G
	OUT_SET_REG(GPIOG, Pin0, IO_PP, IO_OUT_HS);	
	OUT_SET_REG(GPIOG, Pin1, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOG, Pin2, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOG, Pin3, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOG, Pin4, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOG, Pin5, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOG, Pin6, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOG, Pin7, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOG, Pin8, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOG, Pin9, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOG, Pin10, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOG, Pin11, IO_PP, IO_OUT_HS);
	OUT_SET_REG(GPIOG, Pin12, IO_PP, IO_OUT_HS);
	
	OUT_SET_REG(GPIOG, Pin13, IO_PP, IO_OUT_HS);	//LED1
	OUT_SET_REG(GPIOG, Pin14, IO_PP, IO_OUT_HS);	//LED2
	
	OUT_SET_REG(GPIOG, Pin15, IO_PP, IO_OUT_HS);
	
	
	PIN_CLR(PORT_LED, LED1);
	PIN_CLR(PORT_LED, LED2);

}


void USART_Config(void)
{
	  double divider = 0x00;
//konfigurowanie ukladu USART2 
	USART2->CR1&=~USART_CR1_PCE;				
	USART2->CR1&=~USART_CR1_M;			
	USART2->CR2=(USART2->CR2 & USART_BSTOP_CLR) | USART_BSTOP_1;			

	USART2->CR1&=~USART_CR1_OVER8; 

  divider = ((double)45000000 / (16*9600));		   
  USART2->BRR |= (uint16_t)divider << 4;
  USART2->BRR |= (uint16_t)((divider-(uint16_t)divider)*16);


	USART2->CR1|=USART_CR1_TE;
	USART2->CR1&=~USART_CR1_TXEIE;
	USART2->CR1|=USART_CR1_RE;
	USART2->CR1|=USART_CR1_RXNEIE;
	USART2->CR1|=USART_CR1_UE;	

}


